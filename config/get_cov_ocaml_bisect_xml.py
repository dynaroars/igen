#read coverage from XML file (generated by ocaml bisect)

import vu_common as CM

def parse(xmlfile, ignores=None):
    covered = set()
    uncovered = set()
    
    import xml.etree.ElementTree
    tree = xml.etree.ElementTree.parse(xmlfile)
    root = tree.getroot()
    assert root.tag == "bisect-report", root.tag
    
    fs = [f for f in root if f.tag == "file"]
    for f in fs:
        assert set(f.attrib) == set(['path']), f.attrib
        filename = f.attrib ['path']
        
        if ignores and any(ignore in filename for ignore in ignores):
            continue
        
        points = [point for point in f if point.tag == "point"]
        for point in points:
            assert set(point.attrib) == set(["count", "kind", "offset"]), \
                point.attrib
            
            pointid = point.attrib["offset"]
            nhits = int(point.attrib["count"])
            cline = "{}:{}".format(filename, pointid)
            if nhits >= 1:
                assert cline not in covered, cline
                covered.add(cline)
            else:
                assert nhits == 0, nhits
                assert cline not in uncovered, cline
                uncovered.add(cline)
        
    return covered, uncovered


def cleanup(lines):
    """
    clean up resulting format
    E.g., dir/file,cover:n  ->  file:n
    """
    import os.path
    hashd = {}
    lines_ = set()
    for l in lines:
        ldir = os.path.dirname(l)
        lfile =  os.path.basename(l)
        if ldir not in hashd:
            hashd[ldir] = ''.join(s[0] for s in ldir.split("/") if s)
            
        lines_.add("{}/{}".format(hashd[ldir],lfile))
    
    return lines_
    
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("xml", help="xml cov file")
    parser.add_argument("-ignores", help='ignore strings e.g., "version lexer"', action="store")    
    args = parser.parse_args()
    ignores = args.ignores.split() if args.ignores else None
    
    covered, uncovered = parse(args.xml, ignores)
    covered = cleanup(covered)
    print '{} covered lines'.format(len(covered))    
    print '\n'.join(sorted(covered))
    print '{} covered lines'.format(len(covered))
    
    print '{} uncovered lines'.format(len(uncovered))
    #print '\n'.join(sorted(uncovered))
    
