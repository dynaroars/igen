#!/usr/bin/env python2.7

"""
Get coverage of pylint
"""

import argparse
import os.path
import vu_common as CM

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", help="input configurations")
    args = parser.parse_args()
    inputs = args.inputs.strip()  #  "x 0, y 1, z 0"
    parts = [p.split() for p in inputs.split(",")]
    varnames, varvals = zip(*parts)
    assert len(varnames) == len(varvals)

    tmp_dir = "/var/tmp"
    prog_name = "pylint"
    prog_exe = os.path.join("/usr/bin", prog_name)
    prog_out = "{}/tvn.out".format(tmp_dir)    
    prog_inp = ' '.join("-{}".format(n) if v == "on" else ""
                        for n,v in zip(varnames, varvals))

    cmd = "python-coverage erase"
    CM.vcmd(cmd)

    #run coverage on tests
    opts = "--pylib -a --include \"*{}*\" {}".format(prog_name, prog_exe)
    
    prog_inp0 = prog_inp + " igen.py"
    cmd = "python-coverage run  {} {} > /dev/null".format(opts, prog_inp0)
    print cmd
    CM.vcmd(cmd)

    #get coverage
    cov_xml = "{}/{}_cov.xml".format(tmp_dir, prog_name)
    cmd = "python-coverage xml -o {}".format(cov_xml)
    CM.vcmd(cmd)
    
    from get_cov_python_xml import parse, cleanup
    covered, _ = parse(cov_xml)
    #covered = cleanup(covered, cov_dir)
    covered = '\n'.join(sorted(covered))
    print len(covered)
    CM.vwrite(prog_out, covered)
    
    try:
        _,rs_err = CM.vcmd(cmd)
        assert len(rs_err) == 0, rs_err
    except:
        print("cmd '{}' failed".format(cmd))

    print prog_out
