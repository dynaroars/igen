1. Compile the example program 
$ gcc ex_motiv.c -o prog.exe  

2. Test that the example run_script works

$ ./run_script "v1 0, v2 1, v3 1, v4 1, v5 0, v6 1, v7 3"
/var/tmp/tvn.out

$ less /var/tmp/tvn.out
l3
l4
l9

^^^ So this testscript is something you make,  notice the formats of the input and of the output

My script, called igen.py, takes as input a domain file and your runscript

domain_file: simply tells me how many variables in the configurations and their values. For boolean v1-v6 and for v7 taking 4 values 0 1 2 3 then the dom_file looks like
v1 0 1
...
v6 0 1
v7 0 1 2 3

3. You run igen.py as follow

$ python igen.py --dom_file ex_motiv.dom --run_script run_script "progname"

where "progname" is just some string, e.g., "exam motiv", that I use to identify your program

You get a bunch of outputs with the last line looks something like this

** done benchmark 'example', 1 runs, seed 1435177886.69, time 3.0952808857, results in '/var/tmp/vu_bmWgPxCP'

***IMPORTANT: each time the script is run, it creates a temporary dir and save all results there (e.g., the dir '/var/tmp/vu_bmWgPxCP' above). SAVE this entire directory for future analysis. Of course if the run is not successfull, then you can delete the bad directory.

4. SEED: you can reproduce experiment by using specific seed, e.g., 

$ python igen.py --dom_file ex_motiv.dom --run_script run_script "progname" --seed 1

In short, try to run this script on your program with some specific seed and make sure you get the same gen N configs at the end 


