#!/usr/bin/env python2.7

"""
Get coverage of pylint
"""

import argparse
import os.path
import vu_common as CM

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", help="input configurations")
    args = parser.parse_args()
    inputs = args.inputs.strip()  #  "x 0, y 1, z 0"
    parts = [p.split() for p in inputs.split(",")]
    varnames, varvals = zip(*parts)
    assert len(varnames) == len(varvals)

    from igen_settings import grin_dir, grin_tests_dir
    assert os.path.isdir(grin_dir)
    assert os.path.isdir(grin_tests_dir), grin_tests_dir
    
    tmp_dir = "/var/tmp"
    prog_name = "grin"
    prog_exe = os.path.join(grin_dir, prog_name)
    prog_out = "{}/{}_cov.out".format(tmp_dir, prog_name)

    inps = []
    for n,v in zip(varnames, varvals):
        if v == "off":
            pass
        elif v == "on":
            inps.append(n)
        else:
            inps.append("{} {}".format(n,v))
        
    prog_inp = ' '.join(inps)


    #begin
    cmd = "python-coverage erase"
    CM.vcmd(cmd)

    #run coverage on tests
    opts = "--pylib -a --include \"*{}*\" {}".format(prog_name, prog_exe)
    
    prog_inp0 = prog_inp + " " + "begin* *.run" 
    cmd = "python-coverage run {} {}".format(opts, prog_inp0)
    # print cmd
    # CM.vcmd(cmd)

    rs, rs_err = CM.vcmd(cmd)
    assert rs_err.strip() == "grin 1.2.1" or not rs_err, "SERIOUS ERROR:\n{}".format(rs_err)
    assert "Bug reports to" not in rs, rs
    
    #get coverage
    cov_xml = os.path.join(tmp_dir, "{}_cov.xml".format(prog_name))
    cmd = "python-coverage xml -o {}".format(cov_xml)
    CM.vcmd(cmd)
    
    from get_cov_python_xml import parse, cleanup
    covered, _ = parse(cov_xml)
    covered = cleanup(covered)
    #print len(covered)    
    covered = '\n'.join(sorted(covered))
    CM.vwrite(prog_out, covered)
    
    try:
        _,rs_err = CM.vcmd(cmd)
        assert len(rs_err) == 0, rs_err
    except:
        print("cmd '{}' failed".format(cmd))

    print prog_out
