     if y < 0.5: # (node 0)
         if u < 0.5: # (node 1)
             return [[80.  0.] [80.  0.] [ 0. 80.] [ 0. 80.] [80.  0.] [80.  0.] [80.  0.]] # (node 2, impurity 0.0)
         else
             if v < 0.5: # (node 3)
                 return [[40.  0.] [40.  0.] [ 0. 40.] [ 0. 40.] [40.  0.] [40.  0.] [40.  0.]] # (node 4, impurity 0.0)
             else
                 if t < 0.5: # (node 5)
                     if s < 0.5: # (node 6)
                         return [[10.  0.] [10.  0.] [ 0. 10.] [ 0. 10.] [10.  0.] [ 0. 10.] [10.  0.]] # (node 7, impurity 0.0)
                     else
                         return [[10.  0.] [10.  0.] [ 0. 10.] [ 0. 10.] [10.  0.] [ 0. 10.] [ 0. 10.]] # (node 8, impurity 0.0)
                 else
                     return [[20.  0.] [20.  0.] [ 0. 20.] [ 0. 20.] [20.  0.] [ 0. 20.] [ 0. 20.]] # (node 9, impurity 0.0)
     else
         if x < 0.5: # (node 10)
             if u < 0.5: # (node 11)
                 return [[40.  0.] [40.  0.] [ 0. 40.] [ 0. 40.] [40.  0.] [40.  0.] [40.  0.]] # (node 12, impurity 0.0)
             else
                 if v < 0.5: # (node 13)
                     return [[20.  0.] [20.  0.] [ 0. 20.] [ 0. 20.] [20.  0.] [20.  0.] [20.  0.]] # (node 14, impurity 0.0)
                 else
                     if t < 0.5: # (node 15)
                         if s < 0.5: # (node 16)
                             return [[5. 0.] [5. 0.] [0. 5.] [0. 5.] [5. 0.] [0. 5.] [5. 0.]] # (node 17, impurity 0.0)
                         else
                             return [[5. 0.] [5. 0.] [0. 5.] [0. 5.] [5. 0.] [0. 5.] [0. 5.]] # (node 18, impurity 0.0)
                     else
                         return [[10.  0.] [10.  0.] [ 0. 10.] [ 0. 10.] [10.  0.] [ 0. 10.] [ 0. 10.]] # (node 19, impurity 0.0)
         else
             if z < 2.5: # (node 20)
                 if z < 0.5: # (node 21)
                     if v < 0.5: # (node 22)
                         return [[0. 8.] [0. 8.] [8.  [8. 0.] [8. 0.] [8. 0.] [8. 0.]] # (node 23, impurity 0.0)
                     else
                         if u < 0.5: # (node 24)
                             return [[0. 4.] [0. 4.] [4. 0.] [4. 0.] [4. 0.] [4. 0.] [4. 0.]] # (node 25, impurity 0.0)
                         else
                             if t < 0.5: # (node 26)
                                 if s < 0.5: # (node 27)
                                     return [[0. 1.] [0.  [1. 0.] [1. 0.] [1. 0.] [0. 1.] [1. 0.]] # (node 28, impurity 0.0)
                                 else
                                     return [[0. 1.] [0. 1.] [1. 0.] [1. 0.] [1. 0.] [0. 1.] [0. 1.]] # (node 29, impurity 0.0)
                             else
                                 return [[0. 2.] [0. 2.] [2. 0.] [2. 0.] [2. 0.] [0. 2.] [0. 2.]] # (node 30, impurity 0.0)
                 else
                     if u < 0.5: # (node 31)
                         return [[ 0. 16.] [16.  0.] [16.  0.] [16.  0.] [16.  0.] [16.  0.] [16.  0.]] # (node 32, impurity 0.0)
                     else
                         if v < 0.5: # (node 33)
                             return [[0. 8.] [8. 0.] [8. 0.] [8. 0.] [8. 0.] [8. 0.] [8. 0.]] # (node 34, impurity 0.0)
                         else
                             if t < 0.5: # (node 35)
                                 if s < 0.5: # (node 36)
                                     return [[0. 2.] [2. 0.] [2. 0.] [2. 0.] [2. 0.] [0. 2.] [2. 0.]] # (node 37, impurity 0.0)
                                 else
                                     return [[0. 2.] [2. 0.] [2. 0.] [2. 0.] [2. 0.] [0. 2.] [0. 2.]] # (node 38, impurity 0.0)
                             else
                                 return [[0. 4.] [4. 0.] [4. 0.] [4. 0.] [4. 0.] [0. 4.] [0. 4.]] # (node 39, impurity 0.0)
             else
                 if u < 0.5: # (node 40)
                     return [[ 0. 16.] [ 0. 16.] [16.  0.] [16.  0.] [16.  0.] [16.  0.] [16.  0.]] # (node 41, impurity 0.0)
                 else
                     if v < 0.5: # (node 42)
                         return [[0. 8.] [0. 8.] [8. 0.] [8. 0.] [8. 0.] [8. 0.] [8. 0.]] # (node 43, impurity 0.0)
                     else
                         if t < 0.5: # (node 44)
                             if s < 0.5: # (node 45)
                                 return [[0. 2.] [0. 2.] [2. 0.] [2.  [2.  [0. 2.] [2. 0.]] # (node 46, impurity 0.0)
                             else
                                 return [[0. 2.] [0. 2.] [2. 0.] [2. 0.] [2.  [0. 2.] [0. 2.]] # (node 47, impurity 0.0)
                         else
                             return [[0. 4.] [0. 4.] [4. 0.] [4. 0.] [4. 0.] [0. 4.] [0. 4.]] # (node 48, impurity 0.0)

0, 1, 2, 3, 4, 5, 6
s, t, u, v, x, y, z
{'L0': 0, 'L1': 1, 'L2': 2, 'L2a': 3, 'L3': 4, 'L4': 5, 'L5': 6} 9

L0,L1,L2,L2a,L3,L4,L5
(0, 0, 1, 1, 0, 0, 0): [('>=', 5, 0.5), ('<', 4, 0.5), ('>=', 2, 0.5), ('<', 3, 0.5)],
L2, L2a:  y == 1 & x == 0 & u = 1 & v = 0
(0, 0, 1, 1, 0, 1, 0): [('>=', 5, 0.5), ('<', 4, 0.5), ('>=', 2, 0.5), ('>=', 3, 0.5),('<', 1, 0.5), ('<', 0, 0.5)],
L2, L2a,L4 :   
(0, 0, 1, 1, 0, 1, 1): [('>=', 5, 0.5), ('<', 4, 0.5), ('>=', 2, 0.5), ('>=', 3, 0.5), ('>=', 1, 0.5)],

(1, 1, 0, 0, 0, 0, 0): [('>=', 5, 0.5), ('>=', 4, 0.5), ('>=', 6, 2.5), ('>=', 2, 0.5), ('<', 3, 0.5)],
(1, 1, 0, 0, 0, 1, 0): [('>=', 5, 0.5), ('>=', 4, 0.5), ('>=', 6, 2.5), ('>=', 2, 0.5), ('>=', 3, 0.5), ('<', 1, 0.5), ('<', 0, 0.5)],
(1, 1, 0, 0, 0, 1, 1): [('>=', 5, 0.5), ('>=', 4, 0.5), ('>=', 6, 2.5), ('>=', 2, 0.5), ('>=', 3, 0.5), ('>=', 1, 0.5)],
(1, 0, 0, 0, 0, 0, 0): [('>=', 5, 0.5), ('>=', 4, 0.5), ('<', 6, 2.5), ('>=', 6, 0.5), ('>=', 2, 0.5), ('<', 3, 0.5)],
(1, 0, 0, 0, 0, 1, 0): [('>=', 5, 0.5), ('>=', 4, 0.5), ('<', 6, 2.5), ('>=', 6, 0.5), ('>=', 2, 0.5), ('>=', 3, 0.5), ('<', 1, 0.5), ('<', 0, 0.5)],
(1, 0, 0, 0, 0, 1, 1): [('>=', 5, 0.5), ('>=', 4, 0.5), ('<', 6, 2.5), ('>=', 6, 0.5), ('>=', 2, 0.5), ('>=', 3, 0.5), ('>=', 1, 0.5)]
__main__:INFO:*** iter 1, configs 320, covs 7
