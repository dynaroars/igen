#!/usr/bin/env python2.7

"""
Get coverage of bibtex2html (version 1.98) using bisect (version 1.3)
"""

import argparse
import os.path
import vu_common as CM

def run(cmd):
    if args.verbose: print cmd
    rs, rs_err = CM.vcmd(cmd)
    rs_err = rs_err.strip()
    # print "rs", rs
    # CM.pause("rs")
    # print "rs_err", rs_err
    # CM.pause("err")
    assert not rs_err or "This is bibtex2html version" in rs_err,\
        "SERIOUS ERROR:\n{}".format(rs_err)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", help="input configurations")
    parser.add_argument("--verbose", action="store_true")
    args = parser.parse_args()
    inputs = args.inputs.strip()  #  "x 0, y 1, z 0"
    parts = [p.split() for p in inputs.split(",")]
    varnames, varvals = zip(*parts)
    assert len(varnames) == len(varvals)

    prog_name = "bibtex2html"
    prog_version= "1.98"
    prog_vname = "{}-{}".format(prog_name, prog_version)
    tmp_dir = os.path.join("/var/tmp", prog_vname + "_cov")
    if not os.path.exists(tmp_dir): os.mkdir(tmp_dir)

    main_dir = os.path.join(os.environ["IGEN_EXPS"], prog_name)
    assert os.path.isdir(main_dir), main_dir        
    tests_dir = os.path.join(main_dir, "tests")
    assert os.path.isdir(tests_dir), tests_dir
    
    prog_exe = os.path.join(main_dir, prog_vname, prog_name)
    assert os.path.isfile(prog_exe), prog_exe
    prog_out = os.path.join(tmp_dir, 'out.txt')
    
    inps = []
    for n,v in zip(varnames, varvals):
        if v == "off":
            pass
        elif v == "on":
            inps.append(n)
        else:
            inps.append("{} {}".format(n,v))
        
    prog_inp = ' '.join(inps)


    #begin
    assert "BISECT_FILE" not in os.environ, os.environ["BISECT_FILE"]    
    os.environ["BISECT_FILE"] = os.path.join(tmp_dir, "{}_bisect".format(prog_name))
    
    try:
        cmd = "rm -f {}*".format(os.environ["BISECT_FILE"])
        CM.vcmd(cmd)
    except OSError:
        pass
    
    #run
    ignores = []
    inp = prog_inp + " " + os.path.join(tests_dir, "test.bib")
    cmd = "{} {}".format(prog_exe, inp)
    run(cmd)

    #get coverage
    bisect_report_exe = os.path.join(
        os.environ["IGEN_EXPS"],
        "bisect", "_build", "src", "report", "report.byte")
    
    cov_xml = os.path.join(tmp_dir, "cov.xml")
    flag = "-I {} -xml {}".format(os.path.join(main_dir, prog_vname), cov_xml)
    cmd = "{} {} {}*.out".format(
        bisect_report_exe, flag, os.environ["BISECT_FILE"])
    if args.verbose: print cmd
    CM.vcmd(cmd)
    
    from get_cov_ocaml_bisect_xml import parse, cleanup
    covered, _ = parse(cov_xml)
    covered = cleanup(covered)
    if args.verbose: print len(covered)
    covered = '\n'.join(sorted(covered))
    CM.vwrite(prog_out, covered)
    
    try:
        _,rs_err = CM.vcmd(cmd)
        assert len(rs_err) == 0, rs_err
    except:
        print("cmd '{}' failed".format(cmd))

    print prog_out


